---
- name: Get the current users name
  shell: id -u -n
  changed_when: false
  ignore_errors: no
  register: user_name
  tags: [oc, user]

# PREREQUISITE BLOCK
- name: Check  if OC@{{ oc_version }} is already installed
  stat:
    path: ${{ oc_install_dir }}/oc
  ignore_errors: yes
  changed_when: false
  register: oc_bin_installed

## OC block
- when: not oc_bin_installed.stat.exists
  block:
  - name: Create temporary directory
    tempfile:
      state: directory
      prefix: oc
    changed_when: false
    register: oc_dir_tmp
    tags: [oc, install]

  - name: Download OC bundle TAR.GZ
    get_url:
      url: '{{ oc_bundle_download_url }}'
      dest: '{{ oc_dir_tmp.path }}/'
    when: not oc_dir_tmp|skipped
    register: oc_download
    tags: [oc, install]

  - name: Create OC installation directory
    file:
      path: '{{ oc_install_dir }}'
      state: directory
      owner: '{{ user_name.stdout }}'
    when: not oc_download|skipped
    become: yes
    tags: [oc, install]

  - name: Extract OC bundle TAR.GZ
    unarchive:
      src: '{{ oc_dir_tmp.path }}/{{ oc_bundle_archive }}'
      dest: '{{ oc_install_dir }}'
      owner: '{{ user_name.stdout }}'
      copy: no
      extra_opts: --strip-components=1
    when: not oc_download|skipped
    register: oc_bundle_extract
    become: yes
    tags: [oc, install]

  - name: Sym link {{ oc_install_dir }} to OC default
    file:
      src: '{{ oc_install_dir }}'
      dest: '{{ oc_default_dir }}'
      state: link
      force: yes
    when: not oc_bundle_extract|skipped
    register: oc_default_opt_dir
    tags: [oc, install]

  - name: Sym link /usr/local/bin/oc to OC default
    file:
      src: '{{ oc_default_dir }}/oc'
      dest: '/usr/local/bin/oc'
      state: link
      force: yes
    when: not oc_default_opt_dir|skipped
    become: yes
    tags: [oc, install]

  always:
    - name: Cleanup TMP directory
      file:
        name: '{{ oc_dir_tmp.path }}'
        state: absent
      changed_when: false
      ignore_errors: no
      tags: [oc, install]

# POSTCHECK for OC client version installed
- name: Checking installed version of OC client
  shell: /usr/bin/test "$(oc version | head -n1 | awk '{print $2}' 2> /dev/null)" = v{{ oc_version }}+{{ oc_sha }}
  ignore_errors: yes
  register: oc_wanted_version_installed
  failed_when: oc_wanted_version_installed.rc > 0
  tags: [oc, check]